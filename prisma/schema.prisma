generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id                String       @id @default(uuid())
  name              String
  email             String?      @unique
  password          String    
  role              String       @default("user")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  isEmailVerified   Boolean      @default(false)
  tokens            Token[]
  travelPlan        TravelPlan[]  
}

model TravelPlan {
  id                  String      @id @default(uuid())
  name                String    
  city                String
  travelCompanion     String
  budget              Int
  travelTheme         String
  startDate           DateTime
  endDate             DateTime
  userId              String
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  travelDay           TravelDay[]
}

model TravelDay {
  id                  String      @id @default(uuid())
  day                 Int
  date                DateTime
  travelPlanId        String
  travelPlan          TravelPlan    @relation(fields: [travelPlanId], references: [id], onDelete: Cascade)
  activities          Activity[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Activity {
  id                  String         @id @default(uuid())
  travelDayId         String
  travelDay           TravelDay      @relation(fields: [travelDayId], references: [id], onDelete: Cascade)   
  destinationId       String
  destination         Destination    @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Destination {
  id            String        @id @default(uuid())
  placeName     String
  description   String
  address       String   
  categoryId    String
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  activities    Activity[]
}

model Category {
  id            String        @id @default(uuid())
  name          String
  imageUrl      String
  destinations  Destination[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Token {
  id          String    @id @default(uuid())
  token       String    @db.VarChar(400)
  userId      String    
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String
  expires     DateTime
  blacklisted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
